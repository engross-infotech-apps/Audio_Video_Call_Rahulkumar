import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:permission_handler/permission_handler.dart';

class CallingController extends GetxController {
  static const appId = "7eb4f36c089a4d3aa563555e8f36940c";

  // Fill in the temporary token generated from Agora Console
  static const token =
      "007eJxTYJi5PK+u9e7hWIXAD3o1908++fz/vOfJRrvluzL+CPxoUE9RYDBPTTJJMzZLNrCwTDRJMU5MNDUzNjU1TbUAClqaGCSv51uX3hDIyDA1J4aRkQECQXwRhuSMxLy81Jz49PzszJTS+KLEjNIcBgYAqwoorg==";
  // server agora API that will token.


  // Fill in the channel name you used to generate the token
  final channel = "channel_gokidu_rahul"; //---> from firebase -> doc/collection Id chat


  @override
  void onInit() {
    debugPrint("onInit");
    getPermissions();
    init();
    super.onInit();
  }

  var remoteUid = Rxn<int>(0);
  var localUserJoined = false.obs;

  RtcEngine? engine;

  getPermissions() async {
    await [Permission.microphone, Permission.camera].request();
  }

  init() async {
    // Create RtcEngine instance
    engine = await createAgoraRtcEngine();

    // Initialize RtcEngine and set the channel profile to communication
    await engine!.initialize(const RtcEngineContext(
      appId: appId,
      channelProfile: ChannelProfileType.channelProfileCommunication,
    ));

    // Enable the video module
    await engine!.enableVideo();
    // Enable local video preview
    await engine!.startPreview();
    registerEventHandlers();
  }

  joinChannel() async {
    await engine!.joinChannel(
      // Join a channel using a temporary token and channel name
      token: token,
      channelId: channel,
      options: const ChannelMediaOptions(
          // Automatically subscribe to all video streams
          autoSubscribeVideo: true,
          // Automatically subscribe to all audio streams
          autoSubscribeAudio: true,
          // Publish camera video
          publishCameraTrack: true,
          // Publish microphone audio
          publishMicrophoneTrack: true,
          // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
          clientRoleType: ClientRoleType.clientRoleBroadcaster),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
  }

  leaveChannel()async{
    await engine!.leaveChannel(options: LeaveChannelOptions(

    ));
    localUserJoined.value=false;
    remoteUid.value = null;
  }

  registerEventHandlers() {
    // Add an event handler
    engine!.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint("local user ${connection.localUid} joined");
          localUserJoined.value = true;
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUidd, int elapsed) {
          debugPrint("remote user $remoteUidd joined");
          remoteUid.value = remoteUidd;
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUidd,
            UserOfflineReasonType reason) {
          debugPrint("remote user $remoteUidd left channel");
          remoteUid.value = null;
          // localUserJoined.value=false;
          leaveChannel();
        },

      ),
    );


  }

  @override
  void onClose() async {
    await engine!.leaveChannel(); // Leave the channel
    await engine!.release(); // Release resources
  }
}



// FCM Push
// Push notification host/other device
// Handle cases- background/ foreground
// Background -> workmanager( handle isolate )
// Design Overlay screen
// Notification sounds/ vibration
// IOS

// two person join -> (chat) -> firebase(str) -> Next.js





